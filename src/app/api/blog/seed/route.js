import { NextResponse } from "next/server";
import blog from "../../models/blog";
import connectDatabase from "../../libs/databaseConn";

const blogsData = {
    '-NBEJzJ1vmOd7ASJk-_Q': {
        content:
            "<p>&#10;    More recent additions to the JavaScript language are async functions and the await keyword, added in ECMAScript&#10;    2017. These features basically act as syntactic sugar on top of promises, making asynchronous code easier to write&#10;    and to read afterwards. They make async code look more like old-school synchronous code, so they're well worth&#10;    learning. This article gives you what you need to know.&#10;</p>&#10;<br><br>&#10;<small>There are two parts to using async/await in your code.</small>&#10;<br>&#10;<h3>The async keyword</h3>&#10;<p>&#10;    First of all we have the async keyword, which you put in front of a function declaration to turn it into an async&#10;    function. An async function is a function that knows how to expect the possibility of the await keyword being used&#10;    to invoke asynchronous code.&#10;</p>&#10;<br>&#10;<pre>    <code>&#10;        async function hello() { return &#34;Hello&#34; };&#10;        hello().then((value) =&gt; console.log(value))&#10;    </code>&#10;</pre>&#10;&#10;&#10;<blockquote>&#10;    Ah. Invoking the function now returns a promise. This is one of the traits of async functions &#8212; their return values&#10;    are guaranteed to be converted to promises. <br>&#10;    To actually consume the value returned when the promise fulfills, since it is returning a promise, we could use a&#10;    .then() block: <br> <br>&#10;    <p class=\"text-teal\">&#10;        So the async keyword is added to functions to tell them to return a promise rather than directly returning the&#10;        value.&#10;    </p>&#10;</blockquote>&#10;&#10;&#10;<br><br>&#10;<h3>&#10;    The await keyword&#10;</h3>&#10;<p>&#10;    The advantage of an async function only becomes apparent when you combine it with the await keyword. await only&#10;    works inside async functions within regular JavaScript code, however it can be used on its own with JavaScript&#10;    modules.&#10;</p>&#10;<p>&#10;    await can be put in front of any async promise-based function to pause your code on that line until the promise&#10;    fulfills, then return the resulting value.&#10;</p>&#10;<p>&#10;    You can use await when calling any function that returns a Promise, including web API functions.&#10;</p>&#10;<small>Here is a trivial example:</small>&#10;<br>&#10;<pre>    <code>&#10;        async function hello() {&#10;            return greeting = await Promise.resolve(&#34;Hello&#34;);&#10;          };&#10;          &#10;          hello().then(alert);&#10;    </code>&#10;</pre>&#10;<br><br>&#10;<h3>&#10;    Rewriting promise code with async/await&#10;</h3>&#10;<h5>&#10;    Let's look at a simple fetch example&#10;</h5>&#10;<br>&#10;<pre>    <code>&#10;        fetch('coffee.jpg')&#10;        .then(response =&gt; {&#10;          if (!response.ok) {&#10;            throw new Error(`HTTP error! status: ${response.status}`);&#10;          }&#10;          return response.blob();&#10;        })&#10;        .then(myBlob =&gt; {&#10;          let objectURL = URL.createObjectURL(myBlob);&#10;          let image = document.createElement('img');&#10;          image.src = objectURL;&#10;          document.body.appendChild(image);&#10;        })&#10;        .catch(e =&gt; {&#10;          console.log('There has been a problem with your fetch operation: ' + e.message);&#10;        });&#10;    </code>&#10;</pre>&#10;&#10;&#10;<br><br>&#10;<h5>&#10;    By now, you should have a reasonable understanding of promises and how they work, but let's convert this to use&#10;    async/await to see how much simpler it makes things:&#10;</h5>&#10;<br>&#10;<pre>    <code>&#10;        async function myFetch() {&#10;            let response = await fetch('coffee.jpg');&#10;          &#10;            if (!response.ok) {&#10;              throw new Error(`HTTP error! status: ${response.status}`);&#10;            }&#10;          &#10;            let myBlob = await response.blob();&#10;          &#10;            let objectURL = URL.createObjectURL(myBlob);&#10;            let image = document.createElement('img');&#10;            image.src = objectURL;&#10;            document.body.appendChild(image);&#10;          }&#10;          &#10;          myFetch()&#10;          .catch(e =&gt; {&#10;            console.log('There has been a problem with your fetch operation: ' + e.message);&#10;          });&#10;    </code>&#10;</pre>",
        createdAt: 'Tue Sep 06 2022',
        description: 'Making asynchronous programming easier with async and await',
        id: '-NBEJzJ1vmOd7ASJk-_Q',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/1_3kAwfTZXxNynBOB5O6VQtg_1623948533782?alt=media&token=d0a5a60c-de4b-4a9c-8620-b2b2e979d207',
        name: 'Async await',
        pos: 11,
        tags: ['-NBOziDkiV4qaMlcZWpF'],
        views: 115,
    },
    '-NBEJzJOrNSyF5zBWm3R': {
        content:
            "<p>&#10;    The includes() method determines whether an array includes a certain value among its entries, returning true or&#10;    false as appropriate.&#10;</p>&#10;<br><br>&#10;&#10;&#10;<h3>JavaScript Demo: Array.includes()</h3>&#10;<br>&#10;<pre>   &#10; <code>      const array1 = [1, 2, 3];&#10;        console.log(array1.includes(2));&#10;        // expected output: true&#10;        &#10;        const pets = ['cat', 'dog', 'bat'];&#10;        &#10;        console.log(pets.includes('cat'));&#10;        // expected output: true&#10;        &#10;        console.log(pets.includes('at'));&#10;        // expected output: false&#10;    </code>&#10;</pre>&#10;&#10;&#10;<blockquote>&#10;    inArray returns the index of the element in the array, not a boolean indicating if the item exists in the array. If the element was not found, -1 will be returned.&#10;</blockquote>",
        createdAt: 'Tue Sep 06 2022',
        description: 'Array.prototype.includes()',
        id: '-NBEJzJOrNSyF5zBWm3R',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/javascript-array-includes_1624002257069?alt=media&token=fdcd73b4-3402-46a5-8549-52ece3cc58b5',
        name: 'Array.includes()',
        pos: 12,
        tags: ['-NBOziDkiV4qaMlcZWpF', '-NBOvqGfehfBnpKK-QwO'],
        views: 41,
    },
    '-NBEJzJYsOZcy7ynzASF': {
        content:
            "<p>&#10;    The filter() method creates a new array with all elements that pass the test implemented by the provided function.&#10;    The arr.filter() method is used to create a new array from a given array consisting of only those elements from the given array which satisfy a condition set by the argument method. &#10;Syntax: &#10;</p>&#10;<br><br>&#10;&#10;&#10;<h3>JavaScript Demo: Array.filter()</h3>&#10;<br>&#10;<pre>     <code>&#10;const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];&#10;&#10;&#10;const result = words.filter(word =&gt; word.length &gt; 6);&#10;&#10;&#10;console.log(result);&#10;// expected output: Array [&#34;exuberant&#34;, &#34;destruction&#34;, &#34;present&#34;]&#10;&#10;&#10;    </code>&#10;</pre>&#10;&#10;&#10;<blockquote>&#10;    filter() calls a provided callbackFn function once for each element in an array, and constructs a new array of all&#10;    the values for which callbackFn returns a value that coerces to true. callbackFn is invoked only for indexes of the&#10;    array which have assigned values; it is not invoked for indexes which have been deleted or which have never been&#10;    assigned values. Array elements which do not pass the callbackFn test are skipped, and are not included in the new&#10;    array.&#10;</blockquote>&#10;<br>&#10;<pre>    <code>&#10;// Arrow function&#10;filter((element) =&gt; { ... } )&#10;filter((element, index) =&gt; { ... } )&#10;filter((element, index, array) =&gt; { ... } )&#10;&#10;&#10;// Callback function&#10;filter(callbackFn)&#10;filter(callbackFn, thisArg)&#10;&#10;&#10;// Inline callback function&#10;filter(function callbackFn(element) { ... })&#10;filter(function callbackFn(element, index) { ... })&#10;filter(function callbackFn(element, index, array){ ... })&#10;filter(function callbackFn(element, index, array) { ... }, thisArg)&#10;    </code>&#10;</pre>",
        createdAt: 'Tue Sep 06 2022',
        description: 'Array.prototype.filter()',
        id: '-NBEJzJYsOZcy7ynzASF',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/JavaScript-Filter-Array_1624002625974?alt=media&token=fa1b0f18-2124-467f-a14e-5d81d5866eaf',
        name: 'Array.filter()',
        pos: 13,
        tags: ['-NBOziDkiV4qaMlcZWpF'],
        views: 48,
    },
    '-NBEJzJ_-dcDIIGWVyPd': {
        content:
            '<p>&#10;    The find() method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.&#10;</p>&#10;<br><br>&#10;&#10;&#10;<h3>JavaScript Demo: Array.find()</h3>&#10;<br>&#10;<pre>     <code>&#10;        const array1 = [5, 12, 8, 130, 44];&#10;&#10;&#10;        const found = array1.find(element =&gt; element &gt; 10);&#10;        &#10;        console.log(found);&#10;        // expected output: 12&#10;        &#10;&#10;&#10;    </code>&#10;</pre>&#10;&#10;&#10;<blockquote>&#10;   <p><i class="fa fa-code text-teal"></i> If you need the index of the found element in the array, use findIndex().</p>&#10;   <p><i class="fa fa-code text-teal"></i> If you need to find the index of a value, use Array.prototype.indexOf(). (It&#8217;s similar to findIndex(), but checks each element for equality with the value instead of using a testing function.)</p>&#10;   <p><i class="fa fa-code text-teal"></i> If you need to find if a value exists in an array, use Array.prototype.includes(). Again, it checks each element for equality with the value instead of using a testing function.</p>&#10;   <p><i class="fa fa-code text-teal"></i> If you need to find if any element satisfies the provided testing function, use Array.prototype.some().</p>&#10;</blockquote>&#10;<br>',
        createdAt: 'Tue Sep 06 2022',
        description: 'Array.prototype.find()',
        id: '-NBEJzJ_-dcDIIGWVyPd',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/maxresdefault_1624007950240?alt=media&token=c574957b-0a6d-4498-b39d-d556b7b4bf3e',
        name: 'Array.find()',
        pos: 14,
        tags: ['-NBOziDkiV4qaMlcZWpF'],
        views: 40,
    },
    '-NBEJzJcAqrQY70Ao1U7': {
        content:
            "<p>&#10;    Making server requests in JavaScript-based application is a common task. There are different ways of solving that task. Back in the day developers used the XMLHttpRequest (XHR) objects to interact with servers. For the first time it has been possible to retrieve data from a URL without having to do a full page refresh. This was one of the prerequisites to enable a web page to update just parts of the page without needed to do a full refresh.&#10;</p>&#10;<p>&#10;    However, using XMLHttpRequest has never felt very natural to JavaScript developers and has lead to code which is hard to read and understand. External libraries like jQuery or Axios have been trying to solve that problem and have provide better and cleaner server request APIs.&#10;</p>&#10;<p>&#10;    With the release of the Fetch API JavaScript has now build-in a much cleaner promised-based API which can be used to perform server request in an easy way without needing to use third-party libraries.&#10;</p>&#10;<p>&#10;    This tutorial is for all of you who have not worked with the Fetch API yet. In the following steps we&#8217;re going to cover the Fetch API basics and learn to perform HTTP GET and POST requests with that API by implementing practical examples.&#10;</p>&#10;<br><br>&#10;<pre>    <code>&#10;fetch('https://jsonplaceholder.typicode.com/todos/1')&#10;  .then(response =&gt; response.json())&#10;  .then(json =&gt; cons.log(json))&#10;  </code>&#10;</pre><pre><code><br></code></pre><pre><code>https://sendgb.com/pbh85CsI4xg&#10;https://sendgb.com/kclHACLZ4X3&#10;https://sendgb.com/swjNrC0vXDe&#10;https://sendgb.com/RDEPFCZNs4p&#10;https://sendgb.com/eYHaIyXBRbj&#10;https://sendgb.com/oXkcPusYzFQ<br></code></pre>",
        createdAt: 'Tue Sep 06 2022',
        description: 'Fetch API — Introduction To Promised-based Data Fetching In Plain JavaScript',
        id: '-NBEJzJcAqrQY70Ao1U7',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/JSONPlaceholder-fake-online-api-rest-642x336_1624021356954?alt=media&token=60cf3859-082a-4f5c-9adf-a52b0f51c2e8',
        name: 'Fetch API',
        pos: 15,
        views: 36,
    },
    '-NBEJzJflEi9_IfJY0JJ': {
        content:
            '<h3>&#10;   # Installation&#10;</h3>&#10;<p>&#10;    Importing CDN url to your HTML file&#10;</p>&#10;<div class="highlight html">&#10;    <pre class="editor editor-colors"><div class="line"><span class="text html basic"><span class="meta tag any html"><span class="punctuation definition tag html"><span>&lt;</span></span><span class="entity name tag html"><span>script</span></span><span>&#160;</span><span class="entity other attribute-name html"><span>src</span></span><span>=</span><span class="string quoted double html"><span class="punctuation definition string begin html"><span>&#34;</span></span><span class="markup underline link https hyperlink"><span>https://unpkg.com/sweetalert/dist/sweetalert.min.js</span></span><span class="punctuation definition string end html"><span>&#34;</span></span></span><span class="punctuation definition tag html"><span>&gt;</span><span class="meta scope between-tag-pair html"><span>&lt;</span></span><span>/</span></span><span class="entity name tag html"><span>script</span></span><span class="punctuation definition tag html"><span>&gt;</span></span></span></span></div></pre>&#10;</div>&#10;&#10;&#10;<br><br>&#10;<h3>&#10;    # Getting started&#10; </h3>&#10;&#10;&#10; <h4>Showing an alert</h4>&#10; <p>&#10;    After importing the files into your application, you can call the swal function (make sure it\'s called after the DOM has loaded!)&#10; </p>&#10;&#10;&#10;<div class="text-center">&#10;    <img src="https://www.drupal.org/files/project-images/alert_1.png" alt="" class="img-fluid w-50 mx-auto">&#10;</div>&#10;<br><br>&#10; <pre>     <code>&#10;        swal(&#34;Good job!&#34;, &#34;You clicked the button!&#34;, &#34;success&#34;);&#10;     </code>&#10; </pre>&#10;&#10;&#10; <br>&#10; <a class="btn btn-link" href="https://sweetalert.js.org/guides/#installation">Read more on official sweetAlert website.</a>&#10; <br>',
        createdAt: 'Tue Sep 06 2022',
        description: 'SweetAlert A beautiful replacement for JavaScript’s “alert”.',
        id: '-NBEJzJflEi9_IfJY0JJ',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/sweetalert-690x332_1624021743445?alt=media&token=98007c2b-890b-4b9c-b5d6-abbed0a7af86',
        name: 'SweetAlert JS',
        pos: 10,
        tags: ['-NBOvqGfehfBnpKK-QwO', '-NBOziDkiV4qaMlcZWpF', '-NBP1MUdVcaAuURXispK'],
        views: 37,
    },
    '-NBEJzJruRDnXfH7Fika': {
        content:
            '<p>&#10;    The Generator object is returned by a generator function and it conforms to both the iterable protocol and the&#10;    iterator protocol.&#10;</p>&#10;<h3>&#10;    Constructor&#10;</h3>&#10;<p>&#10;    This object cannot be instantiated directly. Instead, a Generator instance can be returned from a generator&#10;    function:&#10;</p>&#10;<br><br>&#10;<pre>    <code>&#10;        function* generator() {&#10;            yield 1;&#10;            yield 2;&#10;            yield 3;&#10;          }&#10;          &#10;          const gen = generator(); // &#34;Generator { }&#34;&#10;          &#10;          console.log(gen.next().value); // 1&#10;          console.log(generator().next().value); // 1&#10;          console.log(generator().next().value); // 1&#10;    </code>&#10;</pre>&#10;<br><br>&#10;<blockquote>&#10;    <h3>&#10;        Instance methods&#10;    </h3>&#10;    <br>&#10;    <h4 class="text-teal">&#10;        Generator.prototype.next()&#10;    </h4>&#10;    <p>&#10;        Returns a value yielded by the yield expression.&#10;    </p>&#10;    <br>&#10;    &#10;    <h4 class="text-teal">&#10;        Generator.prototype.return()&#10;    </h4>&#10;    <p>&#10;        Returns the given value and finishes the generator.&#10;    </p>&#10;    <br>&#10;    &#10;    <h4 class="text-teal">&#10;        Generator.prototype.throw()&#10;    </h4>&#10;    <p>&#10;        Throws an error to a generator (also finishes the generator, unless caught from within that generator).&#10;    </p>&#10;</blockquote>&#10;<br>&#10;&#10;&#10;<h3>&#10;    Examples&#10;</h3>&#10;<h4>&#10;    An infinite iterator&#10;</h4>&#10;<p>&#10;    With a generator function, values are not evaluated until they are needed. Therefore a generator allows us to define&#10;    a potentially infinite data structure.&#10;</p>&#10;&#10;&#10;<br><br>&#10;<pre>    <code>&#10;        function* infinite() {&#10;            let index = 0;&#10;        &#10;            while (true) {&#10;                yield index++;&#10;            }&#10;        }&#10;        &#10;        const generator = infinite(); // &#34;Generator { }&#34;&#10;        &#10;        console.log(generator.next().value); // 0&#10;        console.log(generator.next().value); // 1&#10;        console.log(generator.next().value); // 2&#10;        // ...&#10;    </code>&#10;</pre>',
        createdAt: 'Tue Sep 06 2022',
        description: 'The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/1_JzWPazF1iLJL3L4BEhwx9g_1624022485113?alt=media&token=2c9e3ab3-8dff-4e02-a260-57bd7374cb93',
        name: 'Generator',
        pos: 16,
        views: 104,
    },
    '-NBEJzK3YwdTCu-9rCiZ': {
        content:
            '<p>&#10;    A website visitor is someone who views/goes to your website. In our weekly email stats this is the number of unique&#10;    visits your website had during that weekly period. If that visitor views multiple pages on your website, that still&#10;    only counts as 1 visit. Additionally, if the visitor leaves your website and comes back within that same week period&#10;    this is all still counted only once as 1 visitor.&#10;</p>&#10;&#10;&#10;<br>&#10;<img src="https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/Screenshot%202021-06-22%20at%202.44.41%20AM_1624310372663?alt=media&amp;token=482e9ed1-19ba-4590-a5a4-5f8c8245e977" alt="" class="img-fluid w-100">&#10;<br>&#10;&#10;&#10;<h2>&#10;    Counting Visits To Your Website&#10;</h2>&#10;<br>&#10;<p>&#10;    There are different ways to count visits to a website. In order to count visits, some code needs to be present to collect data that will measure &#8220;hits.&#8221; As user&#8217;s attention has become increasingly focused on privacy, many people utilize blockers or browsers which prevent their internet activity from being measured by Google and some other services. &#10;</p>&#10;<p>&#10;    <b>Google Analytics</b> (GA) is the standard for measuring website traffic. GA provides an amazing amount of data and is the best way to count website visits for curiosity and to measure results of marketing efforts.&#10;</p>&#10;<p>&#10;    You can install a statistics package on your server on your own to check website visitors. This would allow a more accurate accounting of website visitors.&#10;</p>&#10;<p>&#10;    <b>AWStats</b> is a program that is included by many web hosts who use cPanel, however, you can also install it yourself. The visitor stats this package provides should provide a reasonable estimate of visits for the purposes of sizing a hosting plan.&#10;<br><br>------------------------------------------------------------<br></p><div><div><div><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>&gt;</span></div><div><span>&lt;</span><span>html</span> <span>lang</span>=<span>&#34;en&#34;</span><span>&gt;</span></div><br><div><span>&lt;</span><span>head</span><span>&gt;</span></div><div>    <span>&lt;</span><span>meta</span> <span>charset</span>=<span>&#34;UTF-8&#34;</span><span>&gt;</span></div><div>    <span>&lt;</span><span>meta</span> <span>http-equiv</span>=<span>&#34;X-UA-Compatible&#34;</span> <span>content</span>=<span>&#34;IE=edge&#34;</span><span>&gt;</span></div><div>    <span>&lt;</span><span>meta</span> <span>name</span>=<span>&#34;viewport&#34;</span> <span>content</span>=<span>&#34;width=device-width, initial-scale=1.0&#34;</span><span>&gt;</span></div><div>    <span>&lt;</span><span>title</span><span>&gt;</span>Document<span>&lt;/</span><span>title</span><span>&gt;</span></div><div><span>&lt;/</span><span>head</span><span>&gt;</span></div><br><div><span>&lt;</span><span>body</span><span>&gt;</span></div><br><div>    <span>&lt;</span><span>img</span> <span>src</span>=<span>&#34;&#34;</span> <span>id</span>=<span>&#34;img&#34;</span> <span>alt</span>=<span>&#34;&#34;</span><span>&gt;</span></div><div>    <span>&lt;</span><span>button</span> <span>onclick</span>=<span>&#34;</span><span>handleNextClick</span><span>()&#34;</span><span>&gt;</span>next<span>&lt;/</span><span>button</span><span>&gt;</span></div><div><span>&lt;/</span><span>body</span><span>&gt;</span></div><br><div><span>&lt;</span><span>script</span><span>&gt;</span></div><div>    <span>let</span> <span>allImages</span> = [];</div><div>    <span>let</span> <span>currentImageIndex</span> = <span>0</span>;</div><br><br><div>    <span>const</span> <span>main</span> = <span>async</span> () <span>=&gt;</span> {</div><div>        <span>const</span> <span>res</span> = <span>await</span> <span>fetch</span>(<span>\'https://dummyjson.com/products\'</span>);</div><div>        <span>const</span> <span>data</span> = <span>await</span><span> </span><span>res</span>.<span>json</span>();</div><div>        <span>const</span> {</div><div>            <span>products</span></div><div>        } = <span>data</span>;</div><br><div>        <span>const</span> <span>productsFilterByPrice</span> = (<span>price</span>) <span>=&gt;</span> {</div><div>            <span>const</span> <span>result</span> =<span> </span><span>products</span>.<span>filter</span>((<span>product</span>) <span>=&gt;</span> {</div><div>                <span>if</span> (<span>product</span>.<span>price</span> &lt;= <span>price</span>) {</div><div>                    <span>return</span> <span>product</span></div><div>                }</div><div>            });</div><div>            <span>return</span> <span>result</span></div><div>        }</div><br><div>        <span>console</span>.<span>log</span>(<span>productsFilterByPrice</span>(<span>10</span>));</div><br><div>        <span>const</span> <span>getProductById</span> = (<span>id</span>) <span>=&gt;</span> {</div><div>            <span>const</span> <span>result</span> =<span> </span><span>products</span>.<span>find</span>((<span>product</span>) <span>=&gt;</span> {</div><div>                <span>if</span> (<span>product</span>.<span>id</span> === <span>id</span>) {</div><div>                    <span>return</span> <span>product</span></div><div>                }</div><div>            });</div><div>            <span>return</span> <span>result</span>;</div><div>        }</div><div>        <span>console</span>.<span>log</span>(<span>getProductById</span>(<span>5</span>));</div><br><div>        <span>const</span> <span>addTen</span> = (<span>num</span>) <span>=&gt;</span> {</div><div>            <span>const</span> <span>result</span> =<span> </span><span>products</span>.<span>map</span>((<span>product</span>) <span>=&gt;</span> {</div><div>                <span>return</span> {</div><div>                    ...<span>product</span>,</div><div>                    <span>price</span>:<span> </span><span>product</span>.<span>price</span> + <span>num</span></div><div>                }</div><div>            })</div><div>            <span>return</span> <span>result</span>;</div><div>        }</div><br><div>        <span>console</span>.<span>log</span>(<span>addTen</span>(<span>100</span>))</div><br><div>        <span>const</span> <span>prodNameToArr</span> = () <span>=&gt;</span> {</div><div>            <span>const</span> <span>result</span> =<span> </span><span>products</span>.<span>map</span>((<span>product</span>) <span>=&gt;</span> {</div><div>                <span>return</span><span> </span><span>product</span>.<span>thumbnail</span></div><div>            })</div><br><div>            <span>return</span> <span>result</span>;</div><div>        }</div><br><br><div>        <span>allImages</span> = <span>prodNameToArr</span>();</div><div>        <span>console</span>.<span>log</span>(<span>allImages</span>)</div><div>        <span>document</span>.<span>getElementById</span>(<span>\'img\'</span>).<span>src</span> =<span> </span><span>allImages</span>[<span>0</span>]</div><br><div>    }</div><br><div>    <span>function</span> <span>handleNextClick</span>() {</div><div>        <span>const</span> <span>img</span> =<span> </span><span>allImages</span>[<span>currentImageIndex</span> + <span>1</span>];</div><div>        <span>document</span>.<span>getElementById</span>(<span>\'img\'</span>).<span>src</span> = <span>img</span>;</div><div>        <span>currentImageIndex</span>++;</div><div>    }</div><br><br><div>    <span>main</span>();</div><div><span>&lt;/</span><span>script</span><span>&gt;</span></div><br><div><span>&lt;/</span><span>html</span><span>&gt;</span></div></div><br><br></div>',
        createdAt: 'Tue Sep 06 2022',
        description: 'Counting the total visitors on my website and picturize the data by using chart.js graph',
        id: '-NBEJzK3YwdTCu-9rCiZ',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/Screenshot%202021-06-22%20at%202.44.41%20AM_1624310372663?alt=media&token=482e9ed1-19ba-4590-a5a4-5f8c8245e977',
        name: 'Total Visitors',
        pos: 17,
        views: 105,
    },
    '-NBEJzK9AzmR5aVftDud': {
        content:
            "&#10;&#10;&#10;    <p>&#10;      <b>&#10;        There's nothing more frustrating than opening an interview prep book, only to find a bunch of solutions in a&#10;        programming language that you don't know. That's why all of our questions come with complete written solutions&#10;        in 9 popular languages.&#10;&#10;&#10;      </b>&#10;&#10;&#10;    </p>&#10;<div class=\"text-center\">&#10;<a class=\"btn btn-danger\" href=\"https://suboorkhan.in/cube/\">LIVE DEMO</a></div>&#10;&#10;&#10;<br><br>&#10;<h1>How did i make it?</h1>&#10;&#10;&#10;<br><br>&#10;<h4>Index.HTML</h4>&#10;<pre>    <code>&#10;&#10;&#10;&#10;        &lt;!DOCTYPE html&gt;&#10;&#10;&#10;         &lt;html lang=&#34;en&#34;&gt;&#10;          &lt;head&gt;&#10;          &lt;meta charset=&#34;UTF-8&#34;&gt;&#10;          &lt;title&gt;&#10;         CodePen - Basic Three.js Example&lt;/title&gt;&#10;          &lt;link rel=&#34;stylesheet&#34; href=&#34;./style.css&#34;&gt;&#10;          &lt;link rel=&#34;stylesheet&#34; &#10;          href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&#34;&#10;           integrity=&#34;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&#34; &#10;           crossorigin=&#34;anonymous&#34;&gt;&#10;          &lt;/head&gt;&#10;          &lt;body&gt;&#10;          &lt;div class=&#34;container mt&#34;&gt;&#10;          &lt;div id=&#34;cube&#34;&gt;&#10;          &lt;/div&gt;&#10;          &lt;p&gt;&#10;          &lt;b&gt;&#10;          There's nothing more frustrating than opening an interview prep book, only to find a &#10;          bunch of solutions in a programming language that you don't know. That's why all of our questions&#10;           come with complete written solutions in 9 popular languages. &lt;/b&gt;&#10;          &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;script src='https://threejs.org/build/three.js'&gt;&#10;         &lt;/script&gt;&#10;          &lt;script src=&#34;./script.js&#34;&gt;&#10;         &lt;/script&gt;&#10;          &lt;/body&gt;&#10;          &lt;/html&gt;&#10;&#10;&#10;    </code>&#10;</pre>&#10;&#10;&#10;<br><br>&#10;<h4>style.css</h4>&#10;<pre>    <code>&#10;&#10;&#10;    canvas { width: auto !important; height: 550px !important }&#10;&#10;&#10;    #cube {&#10;        max-width: 100px !important;&#10;    }&#10;    </code>&#10;</pre>&#10;&#10;&#10;<br><br>&#10;<h4>script.js</h4>&#10;<pre>    <code>&#10;&#10;&#10;        let camera, scene, renderer, cube;&#10;&#10;&#10;        function init() {&#10;            // Init scene&#10;            scene = new THREE.Scene();&#10;        &#10;            // Init camera (PerspectiveCamera)&#10;            camera = new THREE.PerspectiveCamera(&#10;                75,&#10;                window.innerWidth / window.innerHeight,&#10;                0.1,&#10;                1000&#10;            );&#10;        &#10;            // Init renderer&#10;            renderer = new THREE.WebGLRenderer({ antialias: true });&#10;            console.log(renderer);&#10;            renderer.setClearColor ( &#34;white&#34;, 1 )&#10;        &#10;            // Set size (whole window)&#10;            renderer.setSize(window.innerWidth, window.innerHeight);&#10;        &#10;            // Render to canvas element&#10;            document.getElementById(&#34;cube&#34;).appendChild(renderer.domElement);&#10;        &#10;            // Init BoxGeometry object (rectangular cuboid)&#10;            const geometry = new THREE.BoxGeometry(3, 3, 3);&#10;        &#10;            // Create material with color&#10;            // const material = new THREE.MeshBasicMaterial({ color: 0x0000ff });&#10;        &#10;            // Add texture - &#10;            const texture = new THREE.TextureLoader().load('img/react.png');&#10;        &#10;            // Create material with texture&#10;            var materialArray = [];&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture('img/react.png' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'img/angular.png' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture('img/vue.jpeg' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'img/laravel.jpeg' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture('img/go.png' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;            materialArray.push(new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture( 'img/node.png' ), side: THREE.DoubleSide, transparent: true, opacity: 0.9 }));&#10;        &#10;        &#10;            // Create mesh with geo and material&#10;            cube = new THREE.Mesh(geometry, materialArray);&#10;            // Add to scene&#10;            scene.add(cube);&#10;        &#10;            // Position camera&#10;            camera.position.z = 5;&#10;        }&#10;        &#10;        // Draw the scene every time the screen is refreshed&#10;        function animate() {&#10;            requestAnimationFrame(animate);&#10;        &#10;            // Rotate cube (Change values to change speed)&#10;            cube.rotation.y += 0.01;&#10;            cube.rotation.x = 0.1;&#10;        &#10;            renderer.render(scene, camera);&#10;        &#10;        }&#10;        &#10;        function onWindowResize() {&#10;            // Camera frustum aspect ratio&#10;            camera.aspect = window.innerWidth / window.innerHeight;&#10;            // After making changes to aspect&#10;            camera.updateProjectionMatrix();&#10;            // Reset size&#10;            renderer.setSize(window.innerWidth, window.innerHeight);&#10;        }&#10;        &#10;        window.addEventListener('resize', onWindowResize, false);&#10;        &#10;        init();&#10;        animate();&#10;    </code>&#10;</pre>&#10;&#10;&#10;&#10;&#10;&#10;",
        createdAt: 'Tue Sep 06 2022',
        description: 'Inspired by AlgoExpert website UI',
        id: '-NBEJzK9AzmR5aVftDud',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/Screenshot%202021-06-24%20at%205.38.55%20PM_1624536731610?alt=media&token=356f114d-917e-4cfa-a4c3-47d15633b62f',
        name: 'Algo Expert Cube Clone ',
        pos: 18,
        views: 33,
    },
    '-NBEJzKDI9Yb09U-nu_x': {
        content:
            "<h4>Home.jsx</h4><code><pre>import React, { Component } from &#34;react&#34;;&#10;import { render } from &#34;react-dom&#34;;&#10;// Import Highcharts&#10;import Highcharts from &#34;highcharts/highstock&#34;;&#10;&#10;&#10;// Import our demo components&#10;import Chart from &#34;./chart.jsx&#34;;&#10;&#10;&#10;// Load Highcharts modules&#10;require(&#34;highcharts/indicators/indicators&#34;)(Highcharts);&#10;require(&#34;highcharts/indicators/pivot-points&#34;)(Highcharts);&#10;require(&#34;highcharts/indicators/macd&#34;)(Highcharts);&#10;require(&#34;highcharts/modules/exporting&#34;)(Highcharts);&#10;require(&#34;highcharts/modules/map&#34;)(Highcharts);&#10;&#10;&#10;const chartOptions = {&#10;  title: {&#10;    text: &#34;&#34;,&#10;  },&#10;  series: [&#10;    {&#10;      data: [1, 2, 3],&#10;    },&#10;  ],&#10;};&#10;&#10;&#10;export default class Home extends Component {&#10;  constructor(props) {&#10;    super(props);&#10;    this.state = {&#10;      chartConfig: {&#10;        options: {&#10;          title: {&#10;            text: &#34;Solar Employment Growth by Sector, 2010-2016&#34;,&#10;          },&#10;&#10;&#10;          subtitle: {&#10;            text: &#34;Source: thesolarfoundation.com&#34;,&#10;          },&#10;&#10;&#10;          yAxis: {&#10;            title: {&#10;              text: &#34;Number of Employees&#34;,&#10;            },&#10;          },&#10;&#10;&#10;          xAxis: {&#10;            accessibility: {&#10;              rangeDescription: &#34;Range: 2010 to 2017&#34;,&#10;            },&#10;          },&#10;&#10;&#10;          legend: {&#10;            layout: &#34;vertical&#34;,&#10;            align: &#34;right&#34;,&#10;            verticalAlign: &#34;middle&#34;,&#10;          },&#10;&#10;&#10;          plotOptions: {&#10;            series: {&#10;              label: {&#10;                connectorAllowed: false,&#10;              },&#10;              pointStart: 2010,&#10;            },&#10;          },&#10;&#10;&#10;          series: [&#10;            {&#10;              name: &#34;Installation&#34;,&#10;              data: [43934, 52503, 57177, 69658, 97031, 119931, 137133, 154175],&#10;            },&#10;            {&#10;              name: &#34;Manufacturing&#34;,&#10;              data: [24916, 24064, 29742, 29851, 32490, 30282, 38121, 40434],&#10;            },&#10;            {&#10;              name: &#34;Sales &amp; Distribution&#34;,&#10;              data: [11744, 17722, 16005, 19771, 20185, 24377, 32147, 39387],&#10;            },&#10;            {&#10;              name: &#34;Project Development&#34;,&#10;              data: [null, null, 7988, 12169, 15112, 22452, 34400, 34227],&#10;            },&#10;            {&#10;              name: &#34;Other&#34;,&#10;              data: [12908, 5948, 8105, 11248, 8989, 11816, 18274, 18111],&#10;            },&#10;          ],&#10;&#10;&#10;          responsive: {&#10;            rules: [&#10;              {&#10;                condition: {&#10;                  maxWidth: 500,&#10;                },&#10;                chartOptions: {&#10;                  legend: {&#10;                    layout: &#34;horizontal&#34;,&#10;                    align: &#34;center&#34;,&#10;                    verticalAlign: &#34;bottom&#34;,&#10;                  },&#10;                },&#10;              },&#10;            ],&#10;          },&#10;        },&#10;      },&#10;    };&#10;  }&#10;  render() {&#10;    return (&#10;      <div>&#10;        &#10;      </div>&#10;    );&#10;  }&#10;}</pre><pre>//Chart.js&#10;import React from 'react'&#10;import HighchartsReact from 'highcharts-react-official'&#10;&#10;const Chart = ({ options, highcharts }) =&gt; &lt;HighchartsReact&#10;  highcharts={highcharts}&#10;  constructorType={'chart'}&#10;  options={options}&#10;/&gt;&#10;export default Chart<br></pre>&#10;</code>",
        createdAt: 'Tue Sep 06 2022',
        description:
            'Highcharts is a modern SVG-based, multi-platform charting library. It makes it easy to add interactive charts to web and mobile projects. It has been in active development since 2009, and remains a developer favorite due to its robust feature set, ease of use and thorough documentation.',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/Screenshot%202021-09-05%20at%205.15.42%20PM_1630842473275?alt=media&token=29c03012-9a87-4045-adb9-a3a394195037',
        name: 'Highcharts in React',
        pos: 19,
        views: 23,
    },
    '-NBEJzKIyzTH2poKdaFO': {
        content:
            "<h3>Form.JSX</h3>&#10;<code><pre>import React, { Component } from &#34;react&#34;;&#10;import AutoCompleteInput from &#34;./AutoCompleteInput&#34;;&#10;&#10;&#10;export default class AddTodo extends Component {&#10;  constructor(props) {&#10;    super(props);&#10;    this.state = {&#10;      value: &#34;&#34;,&#10;      items: [],&#10;    };&#10;  }&#10;&#10;&#10;  componentDidMount() {&#10;    fetch(&#34;https://jsonplaceholder.typicode.com/todos&#34;)&#10;      .then((response) =&gt; response.json())&#10;      .then((json) =&gt; {&#10;        const el = json.map((el) =&gt; el.title);&#10;        this.setState({&#10;          items: el,&#10;        });&#10;      });&#10;  }&#10;&#10;&#10;  render() {&#10;    return (&#10;      &lt;&gt;&#10;        &#10;          &#10;          &#10;        &#10;      &#10;    );&#10;  }&#10;}&#10;</pre></code>&#10;&#10;&#10;&#10;<h3>AutoInput.js</h3>&#10;&#10;<code><pre>  import React, { Component, Fragment } from &#34;react&#34;;&#10;import PropTypes from &#34;prop-types&#34;;&#10;&#10;&#10;class AutocompleteInput extends Component {&#10;  static propTypes = {&#10;    suggestions: PropTypes.instanceOf(Array)&#10;  };&#10;&#10;&#10;  static defaultProps = {&#10;    suggestions: []&#10;  };&#10;&#10;&#10;  constructor(props) {&#10;    super(props);&#10;&#10;&#10;    this.state = {&#10;      // The active selection's index&#10;      activeSuggestion: 0,&#10;      // The suggestions that match the user's input&#10;      filteredSuggestions: [],&#10;      // Whether or not the suggestion list is shown&#10;      showSuggestions: false,&#10;      // What the user has entered&#10;      userInput: &#34;&#34;,&#10;&#10;&#10;      userSelection: &#34;&#34;&#10;    };&#10;  }&#10;&#10;&#10;  onChange = e =&gt; {&#10;    const { suggestions } = this.props;&#10;    const userInput = e.currentTarget.value;&#10;&#10;&#10;    // Filter our suggestions that don't contain the user's input&#10;    const filteredSuggestions = suggestions.filter(&#10;      suggestion =&gt;&#10;        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) &gt; -1&#10;    );&#10;&#10;&#10;    this.setState({&#10;      activeSuggestion: 0,&#10;      filteredSuggestions,&#10;      showSuggestions: true,&#10;      userInput: e.currentTarget.value&#10;    });&#10;  };&#10;&#10;&#10;  onClick = e =&gt; {&#10;      console.log(&#34;e.currentTarget&#34;)&#10;    this.setState({&#10;      activeSuggestion: 0,&#10;      filteredSuggestions: [],&#10;      showSuggestions: false,&#10;      userInput: e.currentTarget.innerText,&#10;      userSelection: e.currentTarget.innerText&#10;    });&#10;  };&#10;&#10;&#10;  onKeyDown = e =&gt; {&#10;    const { activeSuggestion, filteredSuggestions } = this.state;&#10;&#10;&#10;    // User pressed the enter key&#10;    if (e.keyCode === 13) {&#10;      this.setState({&#10;        activeSuggestion: 0,&#10;        showSuggestions: false,&#10;        userInput: filteredSuggestions[activeSuggestion],&#10;        userSelection: filteredSuggestions[activeSuggestion]&#10;      });&#10;    }&#10;    // User pressed the up arrow&#10;    else if (e.keyCode === 38) {&#10;      if (activeSuggestion === 0) {&#10;        return;&#10;      }&#10;&#10;&#10;      this.setState({ activeSuggestion: activeSuggestion - 1 });&#10;    }&#10;    // User pressed the down arrow&#10;    else if (e.keyCode === 40) {&#10;      if (activeSuggestion - 1 === filteredSuggestions.length) {&#10;        return;&#10;      }&#10;&#10;&#10;      this.setState({ activeSuggestion: activeSuggestion + 1 });&#10;    }&#10;  };&#10;&#10;&#10;  onBlur = e =&gt; {&#10;    if (this.state.userSelection === &#34;&#34;) {&#10;    //   this.setState({&#10;    //     activeSuggestion: 0,&#10;    //     filteredSuggestions: [],&#10;    //     showSuggestions: false,&#10;    //     userInput: '',&#10;&#10;&#10;    //   });&#10;    }&#10;  };&#10;&#10;&#10;  render() {&#10;    const {&#10;      onChange,&#10;      onClick,&#10;      onKeyDown,&#10;      onBlur,&#10;      state: {&#10;        activeSuggestion,&#10;        filteredSuggestions,&#10;        showSuggestions,&#10;        userInput&#10;      }&#10;    } = this;&#10;&#10;&#10;    let suggestionsListComponent;&#10;&#10;&#10;    if (showSuggestions &amp;&amp; userInput) {&#10;      if (filteredSuggestions.length) {&#10;        suggestionsListComponent = (&#10;          <ul>&#10;            {filteredSuggestions.map((suggestion, index) =&gt; {&#10;              let className;&#10;&#10;&#10;              // Flag the active suggestion with a class&#10;              if (index === activeSuggestion) {&#10;                className = &#34;suggestion-active&#34;;&#10;              }&#10;&#10;&#10;              return (</ul><ul>        &amp;lt;form&amp;gt;&#10;          &amp;lt;AutoCompleteInput suggestions={this.state.items} required={true} /&amp;gt;&#10;          &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;submit&amp;quot; /&amp;gt;&#10;        &amp;lt;/form&amp;gt;<br></ul><ul>);&#10;            })}&#10;          </ul>&#10;        );&#10;      } else {&#10;        suggestionsListComponent = (&#10;          <div>&#10;            <em>No suggestions, you're on your own!</em>&#10;          </div>&#10;        );&#10;      }&#10;    }&#10;&#10;&#10;    return (&#10;      &#10;        <font color=\"#000000\">      &amp;lt;Fragment&amp;gt;&#10;        &amp;lt;input&#10;          type=&amp;quot;text&amp;quot;&#10;          onChange={onChange}&#10;          onKeyDown={onKeyDown}&#10;          value={userInput}&#10;          onBlur={onBlur}&#10;          required={this.props.required}&#10;        /&amp;gt;&#10;        {suggestionsListComponent}&#10;      &amp;lt;/Fragment&amp;gt;</font>&#10;      &#10;    );&#10;  }&#10;}&#10;&#10;&#10;export default AutocompleteInput;&#10;&#10;&#10;</pre></code>",
        createdAt: 'Tue Sep 06 2022',
        description:
            'The autocomplete attribute specifies whether a form or an input field should have autocomplete on or off. Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.',
        id: '-NBEJzKIyzTH2poKdaFO',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/suboor-31b5a.appspot.com/o/Screenshot%202021-09-11%20at%209.19.08%20PM_1631375560083?alt=media&token=3ba4fd6a-563c-4deb-b7ec-f5d29da2be20',
        name: 'Auto Complete in React JS class',
        pos: 20,
        tags: ['-NBOveKa1j3vVsC9jPHN'],
        views: 26,
    },
    '-NE5YwEpZHIZePqOFvhx': {
        content:
            '<div class=""><h1 class="pw-post-title iy iz ja bm jb jc jd je jf jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw fw">Observer Pattern in TypeScript</h1></div><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The&#160;<span class="jz jb">Observer</span>&#160;pattern is a software design pattern in which an object, called the&#160;<span class="jz jb">Subject</span>&#160;(<span class="jz jb">Observable</span>), manages a list of dependents, called&#160;<span class="jz jb">Observers</span>, and notifies them automatically of any internal state changes by calling one of their methods.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The Observer pattern follows the publisher/subscribe concept. A subscriber, subscribes to a publisher. The publisher then notifies the subscribers when necessary.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The observer stores state that should be consistent with the subject. The observer only needs to store what is necessary for its own purposes.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">A typical place to use the observer pattern is between your application and presentation layers. Your application is the manager of the data and is the single source of truth, and when the data changes, it can update all the subscribers, that could be part of multiple presentation layers. For example, the score was changed in a televised cricket game, so all the web browser clients, mobile phone applications, leaderboard display on the ground and television graphics overlay, can all now have the updated information synchronized.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The Observer pattern allows you to vary subjects and observers independently. You can reuse subjects without reusing their observers, and vice versa. It lets you add observers without modifying the subject or any of the other observers.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The observer pattern is commonly described as a push model, where the subject pushes the update to all observers. But observers can pull for updates and also only if it decides it is necessary.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">Whether you decide to use a push or pull concept to move data, then there are pros and cons to each. You may decide to use a combination of both to manage reliability.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">E.g., When sending messages across a network, the receiving client, can be slow to receive the full message that was sent, or even timeout. This pushing from the sender&#8217;s side can increase the amount of network hooks or threads if there are many messages still waiting to be fully delivered. The subject is taking responsibility for the delivery.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">On the other hand, if the observer requests for an update from the subscriber, then the subject (observable) can return the information as part of the requests&#8217; response. The observer could also indicate as part of the request, to only return data applicable to X, that would then make the response message smaller to transfer at the expense of making the observable more coupled to the observer.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">Use a push mechanism from the subject when updates are absolutely required in as close to real time from the perspective of the observer, noting that you may need to manage the potential of extra unresolved resources queuing up at the sender.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">If updates on the observer end are allowed to suffer from some delay, then a pull mechanism is most reliable and easiest to manage since it is then the observers responsibly to synchronize its own state.</p><h2 class="sr ss ja bm st mn su mo mq mr sv ms mu ki sw mv mx km sx my na kq sy nb nd sz fw">Terminology</h2><ul class=""><li class="ta tb ja jz b ka tc ke td ki te km tf kq tg ku th ti tj tk fw"><span class="jz jb">Subject Interface</span>: (Observable Interface) The interface that the subject should implement.</li><li class="ta tb ja jz b ka tl ke tm ki tn km to kq tp ku th ti tj tk fw"><span class="jz jb">Concrete Subject</span>: (Observable) The object that is the subject.</li><li class="ta tb ja jz b ka tl ke tm ki tn km to kq tp ku th ti tj tk fw"><span class="jz jb">Observer Interface</span>: The interface that the observer should implement.</li><li class="ta tb ja jz b ka tl ke tm ki tn km to kq tp ku th ti tj tk fw"><span class="jz jb">Concrete Observer</span>: The object that is the observer. There can be a variable number of observers that can subscribe/unsubscribe during runtime.</li></ul><h2 class="sr ss ja bm st mn su mo mq mr sv ms mu ki sw mv mx km sx my na kq sy nb nd sz fw">Observer UML Diagram</h2><figure class="tr ts tt tu gt tv gh gi paragraph-image"><div role="button" tabindex="0" class="tw tx do ty ce tz"><div class="gh gi tq"><picture><source srcset="https://miro.medium.com/max/640/1*UzMOoqOaodcbgMCucIILDg.png 640w, https://miro.medium.com/max/720/1*UzMOoqOaodcbgMCucIILDg.png 720w, https://miro.medium.com/max/750/1*UzMOoqOaodcbgMCucIILDg.png 750w, https://miro.medium.com/max/786/1*UzMOoqOaodcbgMCucIILDg.png 786w, https://miro.medium.com/max/828/1*UzMOoqOaodcbgMCucIILDg.png 828w, https://miro.medium.com/max/1100/1*UzMOoqOaodcbgMCucIILDg.png 1100w, https://miro.medium.com/max/1400/1*UzMOoqOaodcbgMCucIILDg.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"></source><img alt="" class="ce ni ua c" width="700" height="281" role="presentation" src="https://miro.medium.com/max/700/1*UzMOoqOaodcbgMCucIILDg.png"></picture></div></div><figcaption class="ub bl gj gh gi uc ud bm b bn bo cn">Observer Pattern UML Diagram</figcaption></figure><h2 class="sr ss ja bm st mn su mo mq mr sv ms mu ki sw mv mx km sx my na kq sy nb nd sz fw">Source Code</h2><p class="pw-post-body-paragraph jx jy ja jz b ka tc kc kd ke td kg kh ki ue kk kl km uf ko kp kq ug ks kt ku it fw">A Subject (Observable) is created.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">Two Observers are created. They could be across a network, but for demonstration purposes are within the same client.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The Subject notifies the Observers.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">One of the Observers unsubscribes,</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw">The Subject notifies the remaining Observer again.</p><p class="pw-post-body-paragraph jx jy ja jz b ka kb kc kd ke kf kg kh ki kj kk kl km kn ko kp kq kr ks kt ku it fw"><br></p><p><font face="Calibri" color="#75b1ff">./src/observer/observer-concept.ts</font></p><pre><code> Observer Design Pattern Concept&#10;// https://sbcode.net/typescript/observer/#source-code&#10;interface IObservable {&#10;    // The Subject Interface&#10;    subscribe(observer: IObserver): void&#10;    // The subscribe method&#10;    unsubscribe(observer: IObserver): void&#10;    // The unsubscribe method&#10;    notify(...args: unknown[]): void&#10;    // The notify method&#10;}&#10;class Subject implements IObservable {&#10;    // The Subject (a.k.a Observable)&#10;    #observers: Set&#10;    constructor() {&#10;        this.#observers = new Set()&#10;    }&#10;    subscribe(observer: IObserver) {&#10;        this.#observers.add(observer)&#10;    }&#10;    unsubscribe(observer: IObserver) {&#10;        this.#observers.delete(observer)&#10;    }&#10;    notify(...args: unknown[]) {&#10;        this.#observers.forEach((observer) =&gt; {&#10;            observer.notify(...args)&#10;        })&#10;    }&#10;}&#10;interface IObserver {&#10;    // A method for the Observer to implement&#10;    notify(...args: unknown[]): void&#10;    // Receive notifications&#34;&#10;}&#10;class Observer implements IObserver {&#10;    // The concrete observer&#10;    #id: number&#10;    constructor(observable: IObservable) {&#10;        this.#id = COUNTER++&#10;        observable.subscribe(this)&#10;    }&#10;    notify(...args: unknown[]) {&#10;        console.log(&#10;            `OBSERVER_${this.#id} received ${JSON.stringify(args)}`&#10;        )&#10;    }&#10;}&#10;// The Client&#10;let COUNTER = 1 // An ID to help distinguish between objects&#10;const SUBJECT = new Subject()&#10;const OBSERVER_1 = new Observer(SUBJECT)&#10;const OBSERVER_2 = new Observer(SUBJECT)&#10;SUBJECT.notify(\'First Notification\', [1, 2, 3])&#10;// Unsubscribe OBSERVER_2&#10;SUBJECT.unsubscribe(OBSERVER_2)&#10;SUBJECT.notify(\'Second Notification\', { A: 1, B: 2, C: 3 })</code></pre><pre><span>https://run.mocky.io/v3/86016330-8749-48d5-82f8-a9d08acddb50</span><span>&#34;</span><span>;</span><br></pre>',
        createdAt: 'Tue Oct 11 2022',
        description:
            'The Observer pattern is a software design pattern in which an object, called the Subject (Observable), manages a list of dependents, called Observers, and notifies them automatically of any internal state changes by calling one of their methods.',
        id: '-NE5YwEpZHIZePqOFvhx',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2Fmaxresdefault.jpg___13maxresdefault.jpg?alt=media&token=005fb679-6f42-4aa6-8e32-b53e76ebba05',
        name: 'Observer Design Pattern',
        pos: 1,
        tags: ['-NBOz4Hpqg_GGgHWQDEF', '-NBOvqGfehfBnpKK-QwO'],
        views: 69,
    },
    '-NEzAEybXkovMiwP7RWk': {
        content:
            '<h2 class="post__PostTitle-sc-1z06nmi-1 bwnPEq">Data Structures in TypeScript - Linked List</h2><div class="style__Container-iv2i15-0 iJLpCt"><br></div><article class="post__PostBody-sc-1z06nmi-2 ikDPqB"><p>A linked list is a data structure that holds objects arranged in a linear order, this order is determined by a pointer in each node. Unlike an array, a linked list doesn\'t provide constant-time access to a particular index, you have to iterate through the list to find an element, on the other hand, is possible to add and remove items from the beginning of the list in a constant time. Linked lists can be used to implement other data structures, such as stacks, queues, and graphs.</p><p>There are some types of linked lists:</p><p><br></p><ul><li><strong>Singly linked list</strong>&#160;- Each node has only a pointer to the next node.</li><li><strong>Doubly linked list</strong>&#160;- Each node has pointers to both the previous and next node.</li><li><strong>Circular linked list</strong>&#160;- The last node points to the first element.</li></ul><h3><br></h3><p><img alt="linked list" src="https://res.cloudinary.com/dje4crtui/image/upload/v1622906568/data%20structures/linked-list_jdtg7y.png"></p><ul><li><strong>Head</strong>&#160;- the first node&#160;<strong>Tail</strong><span>&#160;- the last node</span></li><li><br></li></ul><h3>Basic operations</h3><p><strong>Insertion</strong>&#160;- It\'s possible to insert a new element anywhere in the list, you just have to take care of the pointers. If you are adding an element to the beginning the new node will pointer to the former head node. If you are appending to the tail, the former tail node will point to the new node. Now, if inserting between nodes, the previous node has to point to the new node which will point to the next node</p><p><strong>Deletion</strong>&#160;- Follow a similar logic of insertion, if you want to remove a node from the middle of the list, you just have to make the target\'s previous node point to the target\'s next node. In a doubly-linked list, you have to take care of the previous pointer too.</p><p><strong>Traverse</strong>&#160;- Each node has a point to next, so you start from the node head and follow the pointers until the last node, which will not point to any node (in a non-circular linked list)</p><pre><code class="language-typescript"><span class="comment linenumber react-syntax-highlighter-line-number">1</span><span>n = list.head&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">2</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">3</span><span></span><span>while</span><span> n != </span><span>null</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">4</span>    n = n.next&#10;</code></pre><p>Here\'s an implementation of a singly linked list:</p><pre><code class="language-typescript"><span class="comment linenumber react-syntax-highlighter-line-number">1</span><span class="hljs-class">class</span><span class="hljs-class"> </span><span class="hljs-class">Node</span><span class="hljs-class">&lt;</span><span class="hljs-class">T</span><span class="hljs-class">&gt; </span><span>{&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">2</span><span>  </span><span class="hljs-attr">data</span><span>: T;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">3</span><span>  next: Node&lt;T&gt; | </span><span>null</span><span> = </span><span>null</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">4</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">5</span><span>  </span><span class="hljs-function">constructor</span><span class="hljs-function">(</span><span class="hljs-function hljs-params">data: T</span><span class="hljs-function">)</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">6</span><span>    </span><span>this</span><span>.data = data;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">7</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">8</span>}&#10;<span class="comment linenumber react-syntax-highlighter-line-number">9</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">10</span><span></span><span class="hljs-class">class</span><span class="hljs-class"> </span><span class="hljs-class">LinkedList</span><span class="hljs-class">&lt;</span><span class="hljs-class">T</span><span class="hljs-class">&gt; </span><span>{&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">11</span><span>  </span><span class="hljs-attr">head</span><span>: Node&lt;T&gt; | </span><span>null</span><span> = </span><span>null</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">12</span><span>  comparator: </span><span class="hljs-function">(</span><span class="hljs-function hljs-params">a: T, b: T</span><span class="hljs-function">) =&gt;</span><span> </span><span>boolean</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">13</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">14</span><span>  </span><span class="hljs-function">constructor</span><span class="hljs-function">(</span><span class="hljs-function hljs-params">comparator: (a: T, b: T) =&gt; </span><span class="hljs-function hljs-params">boolean</span><span class="hljs-function">)</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">15</span><span>    </span><span>this</span><span>.comparator = comparator;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">16</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">17</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">18</span><span>  append(data: T): </span><span>void</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">19</span><span>    </span><span>if</span><span> (!</span><span>this</span><span>.head) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">20</span><span>      </span><span>this</span><span>.head = </span><span>new</span><span> Node(data);&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">21</span><span>    } </span><span>else</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">22</span><span>      </span><span>let</span><span> current = </span><span>this</span><span>.head;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">23</span><span>      </span><span>while</span><span> (current.next != </span><span>null</span><span>) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">24</span>        current = current.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">25</span>      }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">26</span><span>      current.next = </span><span>new</span><span> Node(data);&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">27</span>    }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">28</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">29</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">30</span><span>   </span><span>delete</span><span>(data: T): </span><span>void</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">31</span><span>    </span><span>if</span><span> (!</span><span>this</span><span>.head) </span><span>return</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">32</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">33</span><span>    </span><span>// Check if the head node is the node to be removed</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">34</span><span>    </span><span>if</span><span> (</span><span>this</span><span>.comparator(</span><span>this</span><span>.head.data, data)) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">35</span><span>      </span><span>this</span><span>.head = </span><span>this</span><span>.head.next;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">36</span><span>      </span><span>return</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">37</span>    }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">38</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">39</span><span>    </span><span>let</span><span> current = </span><span>this</span><span>.head.next;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">40</span><span>    </span><span>let</span><span> previous = </span><span>this</span><span>.head;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">41</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">42</span><span>    </span><span>/**&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">43</span>     * Search for the node to be removed and keep track of its previous node&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">44</span>     *&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">45</span>     * If it were a double linked list, we could simply search the node&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">46</span>     * and it would have a pointer to the previous node&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">47</span><span>     **/</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">48</span><span>    </span><span>while</span><span> (current) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">49</span><span>      </span><span>if</span><span> (</span><span>this</span><span>.comparator(current.data, data)) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">50</span><span>        current = </span><span>null</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">51</span><span>      } </span><span>else</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">52</span>        previous = current;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">53</span>        current = current.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">54</span>      }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">55</span>    }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">56</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">57</span><span>    </span><span>/**&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">58</span>     * set previous.next to the target.next, if the node target is not found,&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">59</span>     * the \'previous\' will point to the last node,&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">60</span>     * since the last node hasn\'t next, nothing will happen&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">61</span><span>     **/</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">62</span><span>    previous.next = previous.next ? previous.next.next : </span><span>null</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">63</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">64</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">65</span><span>  search(data: T): Node&lt;T&gt; | </span><span>null</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">66</span><span>    </span><span>let</span><span> current = </span><span>this</span><span>.head;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">67</span><span>    </span><span>while</span><span> (current) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">68</span><span>      </span><span>if</span><span> (</span><span>this</span><span>.comparator(current.data, data)) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">69</span><span>        </span><span>return</span><span> current;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">70</span>      }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">71</span>      current = current.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">72</span>    }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">73</span><span>    </span><span>return</span><span> </span><span>null</span><span>;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">74</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">75</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">76</span><span>  </span><span class="hljs-function">traverse</span><span class="hljs-function">(</span><span class="hljs-function">)</span><span> {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">77</span><span>    </span><span>let</span><span> current = </span><span>this</span><span>.head;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">78</span><span>    </span><span>while</span><span> (current != </span><span>null</span><span>) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">79</span><span>      </span><span>console</span><span>.log(current.data);&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">80</span>      current = current.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">81</span>    }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">82</span>  }&#10;<span class="comment linenumber react-syntax-highlighter-line-number">83</span>}&#10;</code></pre><h3><br></h3><h3><br></h3><h3>Runner technique</h3><p>This technique consists in iterate through a linked list with two pointers, a slow and a fast which will be ahead of the slow pointer by&#160;<em>n</em>&#160;nodes.</p><p><img alt="runner technique" src="https://res.cloudinary.com/dje4crtui/image/upload/v1622906568/data%20structures/runner_kkvdx4.png"></p><p>This is useful to solve some problems with a linked list, like detecting a cycle or finding the middle node of a linked list when you don\'t know its size.</p><p><br></p><p><br></p><pre><code class="language-typescript"><span class="comment linenumber react-syntax-highlighter-line-number">1</span><span>/** Finding the middle node of a linked list **/</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">2</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">3</span><span></span><span>let</span><span> slow: LinkedListNode&lt;</span><span>number</span><span>&gt; | </span><span>null</span><span> | </span><span>undefined</span><span> = linkedList.head;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">4</span><span></span><span>let</span><span> fast: LinkedListNode&lt;</span><span>number</span><span>&gt; | </span><span>null</span><span> | </span><span>undefined</span><span> = linkedList.head?.next;&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">5</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">6</span><span></span><span>/**&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">7</span> * The &#34;fast&#34; will move twice as fast as the &#34;slow&#34; one,&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">8</span> * so at the moment the &#34;fast&#34; reaches the end of the list,&#10;</span><span><span class="comment linenumber react-syntax-highlighter-line-number">9</span> * the &#34;slow&#34; will be in the middle of the list&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">10</span><span> **/</span><span>&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">11</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">12</span><span></span><span>while</span><span> (fast) {&#10;</span><span class="comment linenumber react-syntax-highlighter-line-number">13</span>  slow = slow?.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">14</span>  fast = fast?.next?.next;&#10;<span class="comment linenumber react-syntax-highlighter-line-number">15</span>}&#10;<span class="comment linenumber react-syntax-highlighter-line-number">16</span>&#10;<span class="comment linenumber react-syntax-highlighter-line-number">17</span><span></span><span>console</span><span>.log(slow);</span></code></pre></article>',
        createdAt: 'Sat Oct 22 2022',
        description:
            "A linked list is a data structure that holds objects arranged in a linear order, this order is determined by a pointer in each node. Unlike an array, a linked list doesn't provide constant-time access to a particular index, you have to iterate through the list to find an element, on the other hand, is possible to add and remove items from the beginning of the list in a constant time. Linked lists can be used to implement other data structures, such as stacks, queues, and graphs.",
        id: '-NEzAEybXkovMiwP7RWk',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2Fczadmna05awshy4bx0lk.webp___670czadmna05awshy4bx0lk.webp?alt=media&token=fafa6725-e79e-486d-85b6-a03beb7fe7db',
        name: 'Linked List',
        pos: 2,
        tags: ['-NBOyEn07r9V8HY8Z8RR', '-NBOvqGfehfBnpKK-QwO'],
        views: 51,
    },
    '-NEzj0T6lj2eL0Cv57Dk': {
        content:
            '<div class="w-full px-5 pt-4"><div class="w-full"><div class="flex space-x-4"><div class="flex-1"><div class="flex items-center"><div class="h-full"><span class="mr-2 text-lg font-medium text-label-1 dark:text-dark-label-1">1.&#160;Two Sum</span></div></div></div></div></div></div><div class="px-5 pt-4"><div class="_1l1MA"><p>Given an array of integers&#160;<code>nums</code>&#160;and an integer&#160;<code>target</code>, return&#160;<em>indices of the two numbers such that they add up to&#160;<code>target</code></em>.</p><p>You may assume that each input would have&#160;<span><em>exactly</em>&#160;one solution</span>, and you may not use the&#160;<em>same</em>&#160;element twice.</p><p>You can return the answer in any order.</p><p>&#160;</p><p><span class="example">Example 1:</span></p><pre><span>Input:</span> nums = [2,7,11,15], target = 9&#10;<span>Output:</span> [0,1]&#10;<span>Explanation:</span> Because nums[0] + nums[1] == 9, we return [0, 1].&#10;</pre><p><span class="example">Example 2:</span></p><pre><span>Input:</span> nums = [3,2,4], target = 6&#10;<span>Output:</span> [1,2]&#10;</pre><p><span class="example">Example 3:</span></p><pre><span>Input:</span> nums = [3,3], target = 6&#10;<span>Output:</span> [0,1]&#10;</pre><p>&#160;</p><p><span>Constraints:</span></p><ul><li><code>2 &lt;= nums.length &lt;= 10<span>4</span></code></li><li><code>-10<span>9</span> &lt;= nums[i] &lt;= 10<span>9</span></code></li><li><code>-10<span>9</span> &lt;= target &lt;= 10<span>9</span></code></li><li><span>Only one valid answer exists.</span></li></ul><p>&#160;</p><span>Follow-up:&#160;</span>Can you come up with an algorithm that is less than&#160;<code>O(n<span>2</span>)&#160;</code>time complexity?</div><div class="_1l1MA"><br></div><div class="_1l1MA"><br></div><div class="_1l1MA"><u><br></u></div><h5><u>Solution</u></h5><div><br></div>&#10;&#10;&#10;<pre>    <code>&#10;        function twoSum(nums: number[], target: number): number[] {&#10;            const hash = {};&#10;            for(let x = 0; x &lt; nums.length; x++) {&#10;                if(hash[nums[x]] !== undefined) {&#10;                    return [hash[nums[x]], x];&#10;                }&#10;                hash[target - nums[x]] = x;&#10;            }&#10;          &#10;            return []&#10;          };&#10;    </code>&#10;</pre></div>',
        createdAt: 'Sat Oct 22 2022',
        description: 'Solution for leetcode easy problem "Two Sum"',
        id: '-NEzj0T6lj2eL0Cv57Dk',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-10-22%20at%206.13.43%20PM.png___711Screenshot%202022-10-22%20at%206.13.43%20PM.png?alt=media&token=425d9fef-2e58-4631-bbb7-46d045f71ccd',
        name: 'Leetcode Two Sum Problem',
        pos: 3,
        tags: ['-NBOvqGfehfBnpKK-QwO', '-NEzkEjDlQ1xiXeB2Hm1'],
        views: 34,
    },
    '-NEzmYTm3fcehd89wcRW': {
        content:
            '<div class="w-full px-5 pt-4"><div class="w-full"><div class="flex space-x-4"><div class="flex-1"><div class="flex items-center"><div class="h-full"><span class="mr-2 text-lg font-medium text-label-1 dark:text-dark-label-1">9.&#160;Palindrome Number</span></div></div></div></div></div></div><div class="px-5 pt-4"><div class="_1l1MA"><p>Given an integer&#160;<code>x</code>, return&#160;<code>true</code>&#160;if&#160;<code>x</code>&#160;is palindrome integer.</p><p>An integer is a&#160;<span>palindrome</span>&#160;when it reads the same backward as forward.</p><ul><li>For example,&#160;<code>121</code>&#160;is a palindrome while&#160;<code>123</code>&#160;is not.</li></ul><p>&#160;</p><p><span class="example">Example 1:</span></p><pre><span>Input:</span> x = 121&#10;<span>Output:</span> true&#10;<span>Explanation:</span> 121 reads as 121 from left to right and from right to left.&#10;</pre><p><span class="example">Example 2:</span></p><pre><span>Input:</span> x = -121&#10;<span>Output:</span> false&#10;<span>Explanation:</span> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.&#10;</pre><p><span class="example">Example 3:</span></p><pre><span>Input:</span> x = 10&#10;<span>Output:</span> false&#10;<span>Explanation:</span> Reads 01 from right to left. Therefore it is not a palindrome.&#10;</pre><p>&#160;</p><p><span>Constraints:</span></p><ul><li><code>-2<span>31</span>&#160;&lt;= x &lt;= 2<span>31</span>&#160;- 1</code></li></ul><p>&#160;</p><span>Follow up:</span>&#160;Could you solve it without converting the integer to a string?</div><div class="_1l1MA"><br></div><div class="_1l1MA"><br></div><h4><u><font face="Comic Sans MS">Solution:</font></u></h4></div>&#10;&#10;&#10;<pre>    <code>&#10;        function isPalindrome(x: number): boolean {&#10;            if(x &lt; 0) return false;&#10;            let result = \'\';&#10;            let stringX = x.toString()&#10;            for(let char of stringX) {&#10;                result = char + result&#10;            }&#10;        &#10;            return stringX === result&#10;        };&#10;    </code>&#10;</pre>',
        createdAt: 'Sat Oct 22 2022',
        description: 'Solution of Leetcode Palindrome Number problem',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-10-22%20at%206.29.53%20PM.png___924Screenshot%202022-10-22%20at%206.29.53%20PM.png?alt=media&token=50fde33e-06ac-46de-b22e-1e1419b7191e',
        name: 'Leetcode Palindrome number problem ',
        pos: 4,
        tags: ['-NBOvqGfehfBnpKK-QwO', '-NEzkEjDlQ1xiXeB2Hm1'],
        views: 22,
    },
    '-NFcQd8idZalIlEU4_MA': {
        content:
            '<div class="w-full px-5 pt-4"><div class="w-full"><div class="flex space-x-4"><div class="flex-1"><div class="flex items-center"><div class="h-full"><span class="mr-2 text-lg font-medium text-label-1 dark:text-dark-label-1">14.Longest Common Prefix</span></div></div></div></div></div></div><div class="px-5 pt-4"><div class="_1l1MA"><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string&#160;<code>&#34;&#34;</code>.</p><p>&#160;</p><p><span class="example">Example 1:</span></p><pre><span>Input:</span> strs = [&#34;flower&#34;,&#34;flow&#34;,&#34;flight&#34;]&#10;<span>Output:</span> &#34;fl&#34;&#10;</pre><p><span class="example">Example 2:</span></p><pre><span>Input:</span> strs = [&#34;dog&#34;,&#34;racecar&#34;,&#34;car&#34;]&#10;<span>Output:</span> &#34;&#34;&#10;<span>Explanation:</span> There is no common prefix among the input strings.&#10;</pre><p>&#160;</p><p><span>Constraints:</span></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code>&#160;consists of only lowercase English letters.</li></ul><div><br></div><div><u><font face="Comic Sans MS">Solution:</font></u></div><div><br></div></div></div><pre><code>&#10;function longestCommonPrefix(strs: string[]): string {&#10;    let result: string = \'\';&#10;    const targettedString: string = strs[0];&#10;&#10;    for(let x = 0; x &lt; targettedString.length; x++) {&#10;        const currentChar = targettedString[x];&#10;        for(let y = 0; y &lt; strs.length; y++) {&#10;            if(strs[y][x] !== currentChar) return result;&#10;        }&#10;        result += currentChar&#10;    }&#10;&#10;    return result;&#10;};&#10;&#10;</code></pre>',
        createdAt: 'Sun Oct 30 2022',
        description: 'Solution of Leetcode Longest Common Prefix Problem',
        id: '-NFcQd8idZalIlEU4_MA',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-10-30%20at%203.54.17%20PM.png___488Screenshot%202022-10-30%20at%203.54.17%20PM.png?alt=media&token=04b304e5-c9fb-4325-8a71-6f353cf3d485',
        name: 'Leetcode Longest Common Prefix Problem',
        pos: 5,
        tags: ['-NBOvqGfehfBnpKK-QwO', '-NEzkEjDlQ1xiXeB2Hm1'],
        views: 23,
    },
    '-NFcTB-AMPgpBui3ppC0': {
        content:
            '<div class="w-full px-5 pt-4"><div class="w-full"><div class="flex space-x-4"><div class="flex-1"><div class="flex items-center"><div class="h-full"><span class="mr-2 text-lg font-medium text-label-1 dark:text-dark-label-1">20.&#160;Valid Parentheses</span></div></div></div></div></div></div><div class="px-5 pt-4"><div class="_1l1MA"><p>Given a string&#160;<code>s</code>&#160;containing just the characters&#160;<code>\'(\'</code>,&#160;<code>\')\'</code>,&#160;<code>\'{\'</code>,&#160;<code>\'}\'</code>,&#160;<code>\'[\'</code>&#160;and&#160;<code>\']\'</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Every close bracket has a corresponding open bracket of the same type.</li></ol><p>&#160;</p><p><span class="example">Example 1:</span></p><pre><span>Input:</span> s = &#34;()&#34;&#10;<span>Output:</span> true&#10;</pre><p><span class="example">Example 2:</span></p><pre><span>Input:</span> s = &#34;()[]{}&#34;&#10;<span>Output:</span> true&#10;</pre><p><span class="example">Example 3:</span></p><pre><span>Input:</span> s = &#34;(]&#34;&#10;<span>Output:</span> false&#10;</pre><p>&#160;</p><p><span>Constraints:</span></p><ul><li><code>1 &lt;= s.length &lt;= 10<span>4</span></code></li><li><code>s</code>&#160;consists of parentheses only&#160;<code>\'()[]{}\'</code>.</li></ul><div><br></div><div><u><font face="Calibri">Solution:</font></u></div><div><u><font face="Calibri"><br></font></u></div></div></div><pre><code>var mapOpenToClose: Record = {&#10;        \'(\': \')\',&#10;        \'{\': \'}\',&#10;        \'[\': \']\'&#10;    }&#10;&#10;&#10;function isValid(s: string): boolean {&#10;    if(s.length === 1) return false;&#10;    const stack = [];&#10;    for(let x = 0; x &lt; s.length; x++) {&#10;        let currentParan = s[x] // )&#10;        if(mapOpenToClose[currentParan]) stack.push(currentParan) &#10;        else if(currentParan !== mapOpenToClose[stack[stack.length - 1]]) return false;&#10;        else stack.pop()&#10;    }&#10;    return stack.length === 0&#10;};&#10;</code></pre>',
        createdAt: 'Sun Oct 30 2022',
        description: 'Solution of Leetcode Valid Paranthesis Problem',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-10-30%20at%204.06.26%20PM.png___3Screenshot%202022-10-30%20at%204.06.26%20PM.png?alt=media&token=183b2b2b-eadd-495c-8dcf-d7c60cbb52ec',
        name: 'Leetcode Valid Paranthesis Problem',
        pos: 6,
        tags: ['-NEzkEjDlQ1xiXeB2Hm1', '-NBOvqGfehfBnpKK-QwO'],
        views: 22,
    },
    '-NGDNA7jmONtXX3VGVtB': {
        content:
            "&#10;&#10;<p>A Kaprekar number is a number whose square when divided into two parts and such that sum of parts is equal to the original number and none of the parts has value 0.</p><p><br></p>&#10;<pre><code>const kaprekarNumber = (limit: number) =&gt; {&#10;  const arr = [];&#10;  for (let i = 0; i &lt;= limit; i++) {&#10;    if (i === kaprekar(i * i)) arr.push(i);&#10;  }&#10;&#10;  return arr;&#10;};&#10;&#10;&#10;const kaprekar = (num: number) =&gt; {&#10;  const split = num.toString().split('');&#10;  const median = Math.floor(split.length / 2);&#10;  const slice = split.slice(0, median);&#10;  const slice2 = split.slice(median);&#10;  return Number(slice.join('')) + Number(slice2.join(''));&#10;};&#10;&#10;&#10;console.log(kaprekarNumber(100000));&#10;&#10;&#10;</code></pre>&#10;&#10;",
        createdAt: 'Mon Nov 07 2022',
        description: 'A Kaprekar number is a number whose square when divided into two parts and such that sum of parts is equal to the original number and none of the parts has value 0.',
        id: '-NGDNA7jmONtXX3VGVtB',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-11-07%20at%2012.45.21%20AM.png___266Screenshot%202022-11-07%20at%2012.45.21%20AM.png?alt=media&token=339b6f39-9702-42b7-9f6e-d11fb486dcd6',
        name: 'Kaprekar Number',
        pos: 7,
        tags: ['-NEzkEjDlQ1xiXeB2Hm1', '-NBOvqGfehfBnpKK-QwO'],
        views: 15,
    },
    '-NGWQFK85tGSuKdVPLPL': {
        content:
            '<div class="css-101rr4k"><div class="css-v3d350">7.&#160;Reverse Integer</div><div class="css-10o4wqw"><div class="css-dcmtd5"><br></div>891111028Add to ListShare</div></div><div class="content__u3I1 question-content__JfgR"><p>Given a signed 32-bit integer&#160;<code>x</code>, return&#160;<code>x</code><em>&#160;with its digits reversed</em>. If reversing&#160;<code>x</code>&#160;causes the value to go outside the signed 32-bit integer range&#160;<code>[-2<span>31</span>, 2<span>31</span>&#160;- 1]</code>, then return&#160;<code>0</code>.</p><p><span>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</span></p><p>&#160;</p><p><span class="example">Example 1:</span></p><pre><span>Input:</span> x = 123&#10;<span>Output:</span> 321&#10;</pre><p><span class="example">Example 2:</span></p><pre><span>Input:</span> x = -123&#10;<span>Output:</span> -321&#10;</pre><p><span class="example">Example 3:</span></p><pre><span>Input:</span> x = 120&#10;<span>Output:</span> 21&#10;</pre><p>&#160;Solution:</p></div><pre><code>const&#160;reverseIntger&#160;=&#160;(num:&#160;number)&#160;=&gt;&#160;{&#10;&#160;&#160;let&#160;rev_num&#160;=&#160;0;&#10;&#160;&#160;while&#160;(num&#160;&gt;&#160;0)&#160;{&#10;&#160;&#160;&#160;&#160;rev_num&#160;=&#160;rev_num&#160;*&#160;10&#160;+&#160;(num&#160;%&#160;10);&#10;&#160;&#160;&#160;&#160;num&#160;=&#160;Math.floor(num&#160;/&#160;10);&#10;&#160;&#160;}&#10;};&#10;&#10;&#10;</code></pre>',
        createdAt: 'Thu Nov 10 2022',
        description: 'Solution of leetcode problem - Reverse an Integer',
        imageUrl: 'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2Fheader.png___384header.png?alt=media&token=30134ebb-d2bb-4bed-8b3d-e758d3fbeafd',
        name: 'Leetcode Problem - Reverse an Integer',
        pos: 9,
        tags: ['-NBOziDkiV4qaMlcZWpF', '-NEzkEjDlQ1xiXeB2Hm1'],
        views: 12,
    },
    '-NGmolC_GZW0KQwC28NN': {
        content:
            "<pre><code>let nums = [[1, 2], [[3, 4]], [[[5], [6]]]];&#10;&#10;&#10;/**&#10; * Using reduce method&#10; */&#10;const flatten = (arr: any[]) =&gt;&#10;  arr.reduce((acc, val) =&gt; {&#10;    Array.isArray(val) ? acc.push(...flatten(val)) : acc.push(val);&#10;    return acc;&#10;  }, []);&#10;&#10;&#10;/**&#10; * Using recursive and thunk function&#10; */&#10;const flatten2 = () =&gt; {&#10;  const list = [];&#10;  return function flat(arr) {&#10;    for (let i = 0; i &lt; arr.length; i++) {&#10;      if (typeof arr[i] === 'number') {&#10;        list.push(arr[i]);&#10;      } else if (Array.isArray(arr[i])) {&#10;        flat(arr[i]);&#10;      }&#10;&#10;      if (i === arr.length - 1) {&#10;        return list;&#10;      }&#10;    }&#10;  };&#10;};&#10;</code></pre>",
        createdAt: 'Mon Nov 14 2022',
        description: 'Flatten array of Arrays without using flat prototype method',
        id: '-NGmolC_GZW0KQwC28NN',
        imageUrl:
            'https://firebasestorage.googleapis.com/v0/b/personal-36b0f.appspot.com/o/blogs%2FScreenshot%202022-11-14%20at%202.35.47%20AM.png___383Screenshot%202022-11-14%20at%202.35.47%20AM.png?alt=media&token=baa5ccaa-b1b0-4633-9318-fecbf30dfa91',
        name: 'Flatten array of Array',
        pos: 8,
        tags: ['-NEzkEjDlQ1xiXeB2Hm1', '-NBOziDkiV4qaMlcZWpF'],
        views: 12,
    },
};

export async function POST(req) {
    try {
        const blogArr = [];
        Object.keys(blogsData).forEach((key) => {
            const b = blogsData[key];
            blogArr.push({
                title: b.name,
                description: b.description,
                createdBy: 'Suboor Khan',
                content: b.content,
                imageUrl: b.imageUrl,
                tags: 'Coding, Programming, Javscript',
                views: b.views === 0 ? 98 : b.views,
            });
        });

        await connectDatabase();
        await blog.deleteMany({});
        const data = await blog.insertMany(blogArr);

        return NextResponse.json({
            status: 201,
            message: 'Blog created',
            blog: data,
        });

    } catch (error) {
        return NextResponse.json({
            status: 400,
            message: 'Bad request',
            error: error.toString(),
        });
    }
}
